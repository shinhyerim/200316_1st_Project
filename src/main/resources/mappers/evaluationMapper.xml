<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="evaluationMapper">

	<!-- 강의평가 등록  -->
	<insert id="insert" parameterType="evaluationDTO">
		insert into lectureevaluation(userID,lectureName,professorName,lectureYear,semesterDivide,lectureDivide,evaluationTitle,evaluationContent,totalScore,creditScore,comfortableScore,contentScore,likeCount,evaluationRegdate,evaluationStatus)
		values(#{userID},#{lectureName},#{professorName},#{lectureYear},#{semesterDivide},#{lectureDivide},#{evaluationTitle},#{evaluationContent},#{totalScore},#{creditScore},#{comfortableScore},#{contentScore},0,now(),1)
	</insert>

	<!-- 강의평가 수정을 위한 내용가져오기 -->	
	<select id="view" parameterType="int" resultType="evaluationDTO">
		select * from lectureevaluation where evaluationID=#{evaluationID} and evaluationStatus=1
	</select>
	
	<!-- 강의평가 수정 -->
	<update id="update" parameterType="evaluationDTO">	
		update lectureevaluation set
		lectureName=#{lectureName},professorName=#{professorName},lectureYear=#{lectureYear},
		semesterDivide=#{semesterDivide},lectureDivide=#{lectureDivide},evaluationTitle=#{evaluationTitle},evaluationContent=#{evaluationContent},
		totalScore=#{totalScore},creditScore=#{creditScore},comfortableScore=#{comfortableScore},contentScore=#{contentScore},evaluationRegdate=now()
		where evaluationID=#{evaluationID}
	</update>
	
	<!-- 강의평가 삭제 (사용자) -->
	<update id="updateStatus">
		update lectureevaluation set evaluationStatus=2 where evaluationID=#{evaluationID}
	</update>

	<!-- 강의평가 목록 (사용자): 검색을 위해 MyBatis의 동적SQL인 <if> 사용 -->
	<select id="list" resultType="evaluationDTO">
		SELECT * FROM lectureevaluation
    	WHERE evaluationStatus = 1
    	<if test="searchType != null">
			<if test="searchType == 'lectureName'">
				AND lectureName LIKE CONCAT('%', #{keyword}, '%')
			</if>
			<if test="searchType == 'professorName'">
				AND professorName LIKE CONCAT('%', #{keyword}, '%')
			</if>
		</if>
    	ORDER BY evaluationRegdate desc
    	Limit #{startList}, #{listSize}
	</select>
	
	<!-- 페이징처리를 위한 강의평가 글 개수: 검색을 위해 MyBatis의 동적SQL인 <trim>,<if> 사용-->
	<select id="count" resultType="int">
		select count(*) as listCnt from lectureevaluation
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="searchType != null">
				<if test="searchType == 'lectureName'">
					AND lectureName LIKE CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType == 'professorName'">
					AND professorName LIKE CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='title'">
					AND EVALUATIONTITLE like CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='content'">
					AND EVALUATIONCONTENT like CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='reg_id'">
					AND USERID like CONCAT('%', #{keyword}, '%')
				</if>
			</if>
		</trim>
	</select>
	
	<!-- 강의평가 목록 (사용자, 마이페이지 사용) -->
	<select id="evaluationUser" resultType="evaluationDTO">
		select * from lectureevaluation where userID=#{userID} and evaluationStatus=1 order by evaluationRegdate desc
	</select>
	
	<!-- 강의평가 목록 (관리자): rownum 적용, 검색을 위해 MyBatis의 동적SQL인 <if> 사용 -->
	<select id="evaluationAdmin" resultType="evaluationDTO">
		SELECT * FROM(
    		SELECT @ROWNUM := @ROWNUM + 1 AS rownum, l.*
    		FROM lectureevaluation l, (SELECT @ROWNUM := 0) TMP
    		ORDER BY evaluationID DESC) SUB
    	<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="searchType != null">
				<if test="searchType=='title'">
					AND evaluationTitle like CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='content'">
					AND evaluationContent like CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='reg_id'">
					AND userID like CONCAT('%', #{keyword}, '%')
				</if>
				<if test="searchType=='lectureName'">
					AND lectureName like CONCAT('%', #{keyword}, '%')
				</if>
			</if>
		</trim>
    	ORDER BY SUB.ROWNUM DESC 
    	LIMIT #{startList}, #{listSize}
	</select>
	
	<!-- 강의평가 내용보기 (관리자) -->	
	<select id="adminView" parameterType="int" resultType="evaluationDTO">
		select * from lectureevaluation where evaluationID=#{evaluationID}
	</select>
	
	<!-- 강의평가 삭제 (관리자) -->
	<delete id="delete" parameterType="int">
		delete from lectureevaluation where evaluationID=#{evaluationID}
	</delete>
	
	<!-- '추천' 값 증가시키기 -->
	<update id="like" parameterType="int">
		update lectureevaluation set likeCount = likeCount + 1 where evaluationID=#{evaluationID}
	</update>

</mapper>